stages:
  - build
  - deploy-staging

variables:
  CLUSTER_IP_STAGING: 172.30.145.111
  MIX_DEPS: deps
  OC_REGISTRY_URL: registry.appuio.ch
  OC_REGISTRY_IMAGE: $OC_REGISTRY_URL/$KUBE_NAMESPACE/users
  OC_VERSION: 1.3.3

.builder: &builder
  stage: build
  image: appuio/shop-example-users-builder:latest
  cache:
    key: $CI_PROJECT_ID
    paths:
      - $MIX_DEPS

.oc: &oc
  image: appuio/gitlab-runner-oc:$OC_VERSION
  script:
    # login to the service account to get access to the internal registry
    - oc login $KUBE_URL --token=$KUBE_TOKEN
    - docker login -u serviceaccount -p `oc whoami -t` $OC_REGISTRY_URL
    # build the docker image
    # use the current latest image as a caching source
    - docker pull $OC_REGISTRY_IMAGE:latest
    - docker build --cache-from $OC_REGISTRY_IMAGE:latest -t $OC_REGISTRY_IMAGE:$DEPLOY_TAG .
    # update the configuration in OpenShift
    - sed -i 's;webserver-staging;webserver-'"$DEPLOY_ENV"';g' docker/openshift/*
    - sed -i 's;webserver:latest;webserver:'"$DEPLOY_TAG"';g' docker/openshift/*
    - sed -i 's;'$CLUSTER_IP_STAGING';'$CLUSTER_IP';g' docker/openshift/*
    - oc replace -f docker/openshift -R
    # push the image to the internal registry
    - docker push $OC_REGISTRY_IMAGE:$DEPLOY_TAG
    # trigger a deployment
    - oc deploy users-$DEPLOY_ENV --latest --follow

mirror:
  stage: build
  image: samueldebruyn/debian-git:latest
  script:
    # mirror the repository to GitHub
    - mkdir -p ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - ssh-agent bash -c 'ssh-add <(echo "$DEPLOY_KEY"); git push --force git@github.com:appuio/shop-example-users.git origin/master:master; git push --force git@github.com:appuio/shop-example-users.git --tags'
  allow_failure: true

test:
  <<: *builder
  script:
    - rm -rf deps
    # install necessary application packages
    - mix deps.get
    # compile the application
    - MIX_ENV=prod mix compile
    # run tests
    - mix test
  allow_failure: true

compile:
  <<: *builder
  script:
    - rm -rf deps
    # install necessary application packages
    - mix deps.get
    # build the application sources
    - MIX_ENV=prod mix release
  artifacts:
    expire_in: 5min
    paths:
      - _build
  only:
    - master
    - tags

build-staging:
  <<: *oc
  environment: users-staging
  stage: deploy-staging
  services:
    - docker:dind
  only:
    - master
  except:
    - tags
  tags:
    - dockerbuild
  variables:
    CLUSTER_IP: $CLUSTER_IP_STAGING
    DEPLOY_ENV: staging
    DEPLOY_TAG: latest
